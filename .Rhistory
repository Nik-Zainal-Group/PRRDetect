# closest_refsig_cs <- apply(corrcs2, 1, max)
# closest_refsig_name <- colnames(corrcs2)[closest_refsig_pos]
# # closest cosmicv2
# corrcs3 <- computeCorrelationOfTwoSetsOfSigs(partitions_patterns,COSMIC_Subs_v2)
# closest_cosmic2_pos <- apply(corrcs3, 1, which.max)
# closest_cosmic2_cs <- apply(corrcs3, 1, max)
# closest_cosmic2_name <- colnames(corrcs3)[closest_cosmic2_pos]
toadd <- paste0(closest_cosmic_name," ",sprintf("%.2f",closest_cosmic_cs))
meancs <- mean(closest_cosmic_cs)
serrcs <- sd(closest_cosmic_cs)/sqrt(length(closest_cosmic_cs))
partitions_stats[i,"mean cs to cosmic"] <- meancs
partitions_stats[i,"serr cs to cosmic"] <- serrcs
sigs_order <- order(dendroorder[colnames(partitions_patterns)])
colnums <- ifelse(length(sigs_order)>=5, 5, length(sigs_order))
plot_indels_rsigs(partitions_patterns[,sigs_order,drop=F],outputname = paste0(outdipartitions,"partitions_",i,""),
overall_title = paste0("Partition ",i," (mean|serr RefSigv1 cossim = ",sprintf("%.2f|%.2f)",meancs,serrcs)),
toadd = toadd[sigs_order], colnum = colnums, h = ceiling(length(sigs_order)/colnums)*3, w = 8*colnums, text_size = 3)
# combine all organ-specific signatures that form the recurrent distinct patterns
DPnumbers <- as.numeric(sapply(partition_samples, function(x) strsplit(x,split = " ")[[1]][3]))
partitions_signames <- names(partitions)[partitions %in% DPnumbers]
partitions_sigs <- signatures[,partitions_signames,drop=F]
# you also may want to find the organ-specific signatures that contain these DPs in mixed DPs (not done here)
colnums <- ifelse(ncol(partitions_sigs)>=5, 5, ncol(partitions_sigs))
plot_indels_rsigs(partitions_sigs,out = paste0(outdipartitions,"partitions_",i,"_signatures"),
overall_title = paste0("Partition ",i), colnum = colnums, h = ceiling(ncol(partitions_sigs)/colnums)*3, w = 8*colnums, text_size = 3, toadd = "" )
}
writeTable(partitions_stats,file = paste0(outdir,"clustering_h",clustercutheight,"_stats.tsv"))
writeTable(data.frame(row.names = colnames(sigs_to_cluster),partition = partitionsDP,dendroorder = dendroorder),
file = paste0(outdir,"clustering_h",clustercutheight,"_partitions.tsv"))
outdir <- paste0(rootoutdir,"004_DetermineReferenceSignatures/")
dir.create(outdir,showWarnings = F,recursive = T)
outdipartitions <- paste0(outdir,"partitions/")
dir.create(outdipartitions,showWarnings = F,recursive = T)
# Load annotated clustering table
clustering_table_RefSig <- read.table(paste0(rootoutdir,"003_ClusterRecurrentDistinctPatterns_h0.15/clustering_h0.15_partitions_annotated.tsv"),
sep="\t",check.names = F,header = T,stringsAsFactors = F,comment.char = "",quote = "")
outdir <- paste0(rootoutdir,"004_DetermineReferenceSignatures/")
dir.create(outdir,showWarnings = F,recursive = T)
outdipartitions <- paste0(outdir,"partitions/")
dir.create(outdipartitions,showWarnings = F,recursive = T)
# Load annotated clustering table
clustering_table_RefSig <- read.table(paste0(rootoutdir,"003_ClusterRecurrentDistinctPatterns_h0.15/clustering_h0.15_partitions_annotated.tsv"),
sep="\t",check.names = F,header = T,stringsAsFactors = F,comment.char = "",quote = "")
refsigNewSubtable <- unique(clustering_table_RefSig[,c("RefSig","new")])
message("Number of recurrent sigs: ",nrow(refsigNewSubtable))
# v2.00: 20 recurrent signatures
# v2.01: 21 recurrent signatures
# v2.02: 20 recurrent signatures
message("Number of new recurrent sigs: ",sum(refsigNewSubtable$new=="new"))
clustering_table_RefSig$RefSig <- paste0("RefSig ",clustering_table_RefSig$RefSig)
recurrentRefSigs <- unique(clustering_table_RefSig$RefSig)
recurrentRefSigsPartitionNumber <- 1:length(recurrentRefSigs)
names(recurrentRefSigsPartitionNumber) <- recurrentRefSigs
clustering_table_RefSig$newpartitionForPlottingDendrogram <- clustering_table_RefSig$newpartition
clustering_table_RefSig$newpartition <- recurrentRefSigsPartitionNumber[clustering_table_RefSig$RefSig]
partitionsRefSig <- partitionsDP
partitionsRefSig[clustering_table_RefSig$pattern] <- clustering_table_RefSig$newpartitionForPlottingDendrogram
refSigNames <- unique(clustering_table_RefSig[,c("newpartitionForPlottingDendrogram","RefSig")])
pdf(paste0(outdir,"clustering_recurrent_distinct_patterns.pdf"),width = 13,height = 10)
par(mar=c(11,4,2,2))
plot(h,hang = -1,xlab = "",ylab = "1 - cosine similarity",sub = "")
start_draw <- 0.5
box_bottom <- -0.27
boxes_order <- partitionsRefSig[h$order]
for (i in unique(boxes_order)) {
end_draw <- start_draw + sum(boxes_order==i)
par(xpd=TRUE)
rect(start_draw,box_bottom,end_draw,0,border = "red")
text(refSigNames$RefSig[refSigNames$newpartitionForPlottingDendrogram==i],x = start_draw + (end_draw - start_draw)/2,y = box_bottom - 0.07,cex = 0.9,srt = 90,adj = 1,col = "red")
par(xpd = FALSE)
start_draw <- end_draw
}
dev.off()
partitionsRefSig <- partitionsDP
partitionsRefSig[clustering_table_RefSig$pattern] <- clustering_table_RefSig$newpartition
refSigNames <- unique(clustering_table_RefSig[,c("newpartition","RefSig")])
# get where in the dendrogram each siganture is
dendroorder <- 1:ncol(sigs_to_cluster)
names(dendroorder) <- colnames(sigs_to_cluster)
dendroorder[names(partitionsRefSig[h$order])] <- 1:ncol(sigs_to_cluster)
partitions_stats <- data.frame()
for (i in unique(partitionsRefSig)) {
partition_samples <- names(partitionsRefSig)[partitionsRefSig==i]
partitions_stats[i,"n"] <- length(partition_samples)
partitions_patterns <- sigs_to_cluster[,partition_samples,drop=F]
# # closest cosmic
corrcs <- computeCorrelationOfTwoSetsOfSigs(partitions_patterns,V1_signatures)
closest_cosmic_pos <- apply(corrcs, 1, which.max)
closest_cosmic_cs <- apply(corrcs, 1, max)
closest_cosmic_name <- colnames(corrcs)[closest_cosmic_pos]
# closest RefSig v1
# corrcs2 <- computeCorrelationOfTwoSetsOfSigs(partitions_patterns,RefSig_Subs_v1)
# closest_refsig_pos <- apply(corrcs2, 1, which.max)
# closest_refsig_cs <- apply(corrcs2, 1, max)
# closest_refsig_name <- colnames(corrcs2)[closest_refsig_pos]
toadd <- paste0(closest_cosmic_name," ",sprintf("%.2f",closest_cosmic_cs))
meancs <- mean(closest_cosmic_cs)
serrcs <- sd(closest_cosmic_cs)/sqrt(length(closest_cosmic_cs))
partitions_stats[i,"mean cs to cosmic"] <- meancs
partitions_stats[i,"serr cs to cosmic"] <- serrcs
sigs_order <- order(dendroorder[colnames(partitions_patterns)])
colnums <- ifelse(length(sigs_order)<5, length(sigs_order), 5)
plot_indels_rsigs(partitions_patterns[,sigs_order,drop=F],outputname = paste0(outdipartitions,"partitions_",i,""),
overall_title = paste0("Partition ",i," (mean|serr RefSigv1 cossim = ",sprintf("%.2f|%.2f)",meancs,serrcs)),
toadd = toadd, text_size = 3, colnum = colnums, h = 3*ceiling(length(sigs_order)/colnums), w = 8*colnums)
# combine all organ-specific signatures that form the recurrent distinct patterns
DPnumbers <- as.numeric(sapply(partition_samples, function(x) strsplit(x,split = " ")[[1]][3]))
partitions_signames <- names(partitions)[partitions %in% DPnumbers]
partitions_sigs <- signatures[,partitions_signames,drop=F]
colnums <- ifelse(ncol(partitions_sigs)<5, ncol(partitions_sigs), 5)
plot_indels_rsigs(partitions_sigs, outputname =  paste0(outdipartitions,"partitions_",i,"_signatures"),
overall_title = paste0("Partition ",i), text_size = 3, colnum = colnums, h = 3*ceiling(length(sigs_order)/colnums), w = 8*colnums)
}
writeTable(partitions_stats,file = paste0(outdir,"clustering_stats.tsv"))
writeTable(data.frame(row.names = colnames(sigs_to_cluster),partition = partitionsRefSig,dendroorder = dendroorder),
file = paste0(outdir,"clustering_partitions.tsv"))
# set up the conversion matrix and the RefSigToDistinctPatterns annotation
conversionMatrix_v2 <- matrix(0,ncol = nrow(refSigNames),
nrow = ncol(signatures),
dimnames = list(colnames(signatures),
refSigNames$RefSig))
View(signatures)
View(distinctPatterns)
colnames(distinctPatterns)
View(sigs_to_cluster)
indelsig.tools.lib::plots_indelprofile_89ch(sigs_to_cluster, colnum = 5, h = 3*ceiling(56/5), w = 8*5, text_size = 3, outputname = "results/ReferenceSignatures_InDel_test/final_patterns")
# Load annotated clustering table
clustering_table_RefSig <- read.table(paste0(rootoutdir,"003_ClusterRecurrentDistinctPatterns_h0.15/clustering_h0.15_partitions_annotated.tsv"),
sep="\t",check.names = F,header = T,stringsAsFactors = F,comment.char = "",quote = "")
refsigNewSubtable <- unique(clustering_table_RefSig[,c("RefSig","new")])
View(clustering_table_RefSig)
# Load annotated clustering table
clustering_table_RefSig <- read.table(paste0(rootoutdir,"003_ClusterRecurrentDistinctPatterns_h0.15/clustering_h0.15_partitions_annotated2.tsv"),
sep="\t",check.names = F,header = T,stringsAsFactors = F,comment.char = "",quote = "")
sigs_to_clusters <- distinctPatterns[,clustering_table_RefSig$Distinct_Pattern]
plot_indels_rsigs(sigs_to_clusters,colnum = 5, h = 3*ceiling(56/5), w = 8*5, text_size = 3, toadd = paste0(clustering_table_RefSig$RefSig, clustering_table_RefSig$new), overall_title = "Reference Signatures", outputname = "results/ReferenceSignatures_InDel_test/final_patterns_reference_signatures")
plot_indels_rsigs(sigs_to_clusters,colnum = 5, h = 3*ceiling(56/5), w = 8*5, text_size = 3, toadd = paste0( "|", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new), overall_title = "Reference Signatures", outputname = "results/ReferenceSignatures_InDel_test/final_patterns_reference_signatures")
plot_indels_rsigs(sigs_to_clusters,colnum = 5, h = 3*ceiling(56/5), w = 8*5, text_size = 3, toadd = paste0( "| ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new), overall_title = "Reference Signatures", outputname = "results/ReferenceSignatures_InDel_test/final_patterns_reference_signatures")
sigs_to_clusters_1 <- sigs_to_clusters
paste0(colnames(sigs_to_clusters_1) " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
paste0(colnames(sigs_to_clusters_1), " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
colnames(sigs_to_clusters_1) <- paste0(colnames(sigs_to_clusters_1), " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
colnames(sigs_to_clusters_1)
write.table(x = sigs_to_clusters_1, file = "results/ReferenceSignatures_InDel_test/RefSig_v001.tsv", sep = "\t", quote = F)
signatures_defined <- read.table(x = sigs_to_clusters_1, file = "results/ReferenceSignatures_InDel_test/RefSig_v001.tsv", sep = "\t", quote = F)
signatures_defined <- read.table(file = "results/ReferenceSignatures_InDel_test/RefSig_v001.tsv",header = T, sep = "\t", check.names = F )
View(signatures_defined)
# Load annotated clustering table
clustering_table_RefSig <- read.table(paste0(rootoutdir,"003_ClusterRecurrentDistinctPatterns_h0.15/clustering_h0.15_partitions_annotated2.tsv"),
sep="\t",check.names = F,header = T,stringsAsFactors = F,comment.char = "",quote = "")
# -------------------------------------------------
# Part 1, just cluster the full set of organ-specific signatures and use an arbitrary cut of for the clusters
# -------------------------------------------------
rootoutdir <- "results/ReferenceSignatures_InDel_test/"
# Load annotated clustering table
clustering_table_RefSig <- read.table(paste0(rootoutdir,"003_ClusterRecurrentDistinctPatterns_h0.15/clustering_h0.15_partitions_annotated2.tsv"),
sep="\t",check.names = F,header = T,stringsAsFactors = F,comment.char = "",quote = "")
clustering_table_RefSig$names_columns <- paste0(colnames(clustering_table_RefSig$Distinct_Pattern), " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
make_all_organs <- c(clustering_table_RefSig$common_organs, clustering_table_RefSig$rare_organs)
unlist(strsplit(make_all_organs, sep = ";"))
make_all_organs <- unlist(strsplit(make_all_organs, split = ";"))
make_all_organs
make_all_organs <- unlist(make_all_organs)
make_all_organs <- c(clustering_table_RefSig$common_organs, clustering_table_RefSig$rare_organs)
make_all_organs <- unlist(strsplit(make_all_organs, split = ";"))
make_all_organs <- unique(make_all_organs)
make_all_organs
# Load annotated clustering table
clustering_table_RefSig <- read.table(paste0(rootoutdir,"003_ClusterRecurrentDistinctPatterns_h0.15/clustering_h0.15_partitions_annotated2.tsv"),
sep="\t",check.names = F,header = T,stringsAsFactors = F,comment.char = "",quote = "")
View(clustering_table_RefSig)
clustering_table_RefSig$names_columns <- paste0(colnames(clustering_table_RefSig$Distinct_Pattern), " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
make_all_organs <- c(clustering_table_RefSig$common_organs, clustering_table_RefSig$rare_organs)
make_all_organs <- unlist(strsplit(make_all_organs, split = ";"))
make_all_organs <- unique(make_all_organs)
make_all_organs
colnames(clustering_table_RefSig)
View(signatures_defined)
common_rare <- sapply(make_all_organs, function(x){
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
return(list("common_names"=common_sigs, "rare_names"=rare_sigs, "common_sigs"=signatures_defined[, clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]],
"rare_sigs"=signatures_defined[, clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]],))
})
common_rare <- sapply(make_all_organs, function(x){
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
return(list("common_names"=common_sigs, "rare_names"=rare_sigs, "common_sigs"=signatures_defined[, clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]],
"rare_sigs"=signatures_defined[, clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]]))
})
x = make_all_organs[1]
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
signatures_defined[, clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]]
match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern)
clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]
View(signatures_defined)
View(clustering_table_RefSig)
paste0(colnames(clustering_table_RefSig$Distinct_Pattern), " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
paste0(colnames(clustering_table_RefSig$Distinct_Pattern), " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
paste0(clustering_table_RefSig$Distinct_Pattern, " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
clustering_table_RefSig$names_columns <- paste0(clustering_table_RefSig$Distinct_Pattern, " | ", clustering_table_RefSig$RefSig," ", clustering_table_RefSig$new)
common_rare <- sapply(make_all_organs, function(x){
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
return(list("common_names"=common_sigs, "rare_names"=rare_sigs, "common_sigs"=signatures_defined[, clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]],
"rare_sigs"=signatures_defined[, clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]]))
})
View(clustering_table_RefSig)
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
signatures_defined[, clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]]
clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]
clustering_table_RefSig$rare_organs
signatures_defined[, clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]]
clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]
clustering_table_RefSig$names_columns
clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]
View(signatures_defined)
signatures_defined[,c("Distinct Pattern 13 | 41 new", "Distinct Pattern 15 | 18 " )]
signatures_defined[, trimws(clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"])]
common_rare <- sapply(make_all_organs, function(x){
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
return(list("common_names"=common_sigs, "rare_names"=rare_sigs, "common_sigs"=signatures_defined[, trimws(clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"])],
"rare_sigs"=signatures_defined[, trimws(clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"])]))
})
View(common_rare)
common_rare <- sapply(make_all_organs, simplify = F function(x){
common_rare <- sapply(make_all_organs, simplify = F, function(x){
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
return(list("common_names"=common_sigs, "rare_names"=rare_sigs, "common_sigs"=signatures_defined[, trimws(clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"])],
"rare_sigs"=signatures_defined[, trimws(clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"])]))
})
View(common_rare)
View(common_rare[["Ovary"]][["common_sigs"]])
common_rare <- sapply(make_all_organs, simplify = F, function(x){
common_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["common_organs"], pattern =  x)})]
rare_sigs <- clustering_table_RefSig$Distinct_Pattern[apply(clustering_table_RefSig, 1, function(y){
grepl(x = y["rare_organs"], pattern =  x)})]
return(list("common_names"=common_sigs, "rare_names"=rare_sigs, "common_sigs"=signatures_defined[, trimws(clustering_table_RefSig[match(x = common_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]), drop = F],
"rare_sigs"=signatures_defined[, trimws(clustering_table_RefSig[match(x = rare_sigs, table = clustering_table_RefSig$Distinct_Pattern),"names_columns"]), drop = F]))
})
saveRDS(common_rare, file = "results/ReferenceSignatures_InDel_test/common_rare_signatures_by_organ.RDS")
lapply(common_rare, function(y){dim(y$common_sigs)})
organs_size <- lapply(common_rare, function(y){dim(y$common_sigs)})
organs_size
names(organs_size)[lapply(organs_size, function(y){y[2] == 0 })]
names(organs_size)[unlist(lapply(organs_size, function(y){y[2] == 0 }))]
which_no_common <- names(organs_size)[unlist(lapply(organs_size, function(y){y[2] == 0 }))]
no_common_organs <- common_rare[-which(names(common_rare) %in% which_no_common)]
View(no_common_organs)
View(no_common_organs[["Head_neck"]][["common_sigs"]])
View(signatures_defined)
union_commons <- unique(unlist(lapply(no_common_organs, function(y){colnames(y$common_sigs)})))
union_commons
union_commons <- table(unlist(lapply(no_common_organs, function(y){colnames(y$common_sigs)})))
union_commons
sort(union_commons)
sort(union_commons, decreasing = T)
hist(sort(union_commons, decreasing = T))
hist(sort(union_commons, decreasing = T))
sort(union_commons, decreasing = T)
## set n min = 9
n_min = 9
names(union_commons)[union_commons >= n_min ]
min_common  <- trimws(names(union_commons)[union_commons >= n_min ])
min_common <- signatures_defined[,min_common]
common_rare_specific_commons <- common_rare
common_rare_specific_commons[[which_no_common]]$common_sigs <- min_common
View(common_rare_specific_commons)
View(common_rare_specific_commons)
common_rare_specific_commons <- common_rare
common_rare_specific_commons[[which_no_common]][["common_sigs"]] <- min_common
common_rare_specific_commons[[which_no_common]]["common_sigs"] <- min_common
common_rare_specific_commons[[which_no_common]]["common_sigs"]
common_rare_specific_commons[[which_no_common]][["common_sigs"]]
names(common_rare$Head_neck)
common_rare_specific_commons[[which_no_common]]$common_sigs
for(i in which_no_common){
common_rare_specific_commons[[i]]$common_sigs
}
common_rare_specific_commons <- common_rare
for(i in which_no_common){
common_rare_specific_commons[[i]]$common_sigs <- min_common
}
View(common_rare_specific_commons)
saveRDS(common_rare_specific_commons, file = "results/ReferenceSignatures_InDel_test/common_rare_signatures_by_organ_common_corrected.RDS")
View(common_rare_specific_commons)
union_commons <- table(unlist(lapply(no_common_organs, function(y){colnames(y$common_sigs)})))
## set n min = 9
n_min = 9
min_common  <- names(union_commons)
min_common <- signatures_defined[,min_common]
common_rare_specific_commons <- common_rare
for(i in which_no_common){
common_rare_specific_commons[[i]]$common_sigs <- min_common
}
saveRDS(common_rare_specific_commons, file = "results/ReferenceSignatures_InDel_test/common_rare_signatures_by_organ_common_corrected.RDS")
GEL <- read.table(file = "data/final_catalogues_89_v2.tsv", sep = "\t", header = T)
ICGC <- read.table(file = "data/ICGC_89_channel_catalogue_organ.tsv", sep = "\t", header = T)
ICGC_Breast <- read.table(file =  "data/SCANB_ICGC_Breast_catalogues_89.txt", sep = "\t", header = T)
ICGC <- ICGC[!ICGC$organ == "Breast",]
GEL <- read.table(file = "data/final_catalogues_89_v2.tsv", sep = "\t", header = T, check.names = F)
ICGC <- read.table(file = "data/ICGC_89_channel_catalogue_organ.tsv", sep = "\t", header = T, check.names = F)
ICGC_Breast <- read.table(file =  "data/SCANB_ICGC_Breast_catalogues_89.txt", sep = "\t", header = T, check.names = F)
ICGC <- ICGC[!ICGC$organ == "Breast",]
View(ICGC_Breast)
ICGC_Breast$organ <- "Breast"
ICGC_Breast <- as.data.frame(t(ICGC_Breast))
View(ICGC_Breast)
ICGC_Breast <- ICGC_Breast[,colnames(ICGC)]
View(ICGC)
View(ICGC_Breast)
ICGC_Breast <- read.table(file =  "data/SCANB_ICGC_Breast_catalogues_89.txt", sep = "\t", header = T, check.names = F)
ICGC <- ICGC[!ICGC$organ == "Breast",]
ICGC_Breast$organ <- "Breast"
ICGC_Breast <- read.table(file =  "data/SCANB_ICGC_Breast_catalogues_89.txt", sep = "\t", header = T, check.names = F)
ICGC_Breast <- as.data.frame(t(ICGC_Breast))
View(ICGC_Breast)
ICGC_Breast$organ <- "Breast"
ICGC_Breast$Sample <- rownames(ICGC_Breast)
rownames(ICGC_Breast) <- NULL
ICGC_Breast <- ICGC_Breast[,colnames(ICGC)]
ICGC <- rbind(ICGC, ICGC_Breast)
ICGC <- rbind(ICGC, ICGC_Breast)
GEL <- read.table(file = "data/final_catalogues_89_v2.tsv", header = T, check.names = F)
View(GEL)
colnames(GEL)[which(colnames(GEL) == "sample")] <- "Sample"
View(GEL)
ICGC <- ICGC[,colnames(GEL)]
save.image("~/Cam_home/Giuseppe_ecDNA/Pan_cancer_indel/results/ReferenceSignatures_InDel_test/final_fits.RData")
consensus <- read.csv("data/consensus_InD_7organs_fixed.csv")
View(consensus)
View(ICGC)
View(GEL)
GEL$organ[which(GEL$organ == "Head_Neck_SCC")] <- "Head_neck"
Fits <- sapply(names(common_rare_specific_commons),simplify = F, function(x){
data_f <- NULL
if(x %in% ICGC$organ){
data_f <- rbind(data_f, ICGC[which(ICGC$organ == x),])
}
if(x %in% GEL$organ){
data_f <- rbind(data_f, GEL[which(GEL$organ == x),])
}
data_f$organ <- NULL
rownames(data_f) <- data_f$Sample
data_f$Sample <- NULL
data_f <- as.data.frame(t(data_f))
data_f <- data_f[consensus$X,]
fits <- FitMS(data_f, commonSignatures = common_rare_specific_commons[[x]]$common_sigs,   rareSignatures = common_rare_specific_commons[[x]]$rare_sigs, randomSeed = 1497)
return(fits)
})
names(common_rare_specific_commons)
x = "Head_neck"
data_f <- NULL
if(x %in% ICGC$organ){
data_f <- rbind(data_f, ICGC[which(ICGC$organ == x),])
}
if(x %in% GEL$organ){
data_f <- rbind(data_f, GEL[which(GEL$organ == x),])
}
data_f$organ <- NULL
rownames(data_f) <- data_f$Sample
data_f$Sample <- NULL
data_f <- as.data.frame(t(data_f))
View(data_f)
data_f <- data_f[consensus$X,]
fits <- FitMS(data_f, commonSignatures = common_rare_specific_commons[[x]]$common_sigs,   rareSignatures = common_rare_specific_commons[[x]]$rare_sigs, randomSeed = 1497)
x = "Breast"
data_f <- NULL
if(x %in% ICGC$organ){
data_f <- rbind(data_f, ICGC[which(ICGC$organ == x),])
}
if(x %in% GEL$organ){
data_f <- rbind(data_f, GEL[which(GEL$organ == x),])
}
data_f$organ <- NULL
rownames(data_f) <- data_f$Sample
View(data_f)
GEL <- read.table(file = "data/final_catalogues_89_v2.tsv", header = T, check.names = F)
ICGC <- read.table(file = "data/ICGC_89_channel_catalogue_organ.tsv", sep = "\t", header = T, check.names = F)
ICGC_Breast <- read.table(file =  "data/SCANB_ICGC_Breast_catalogues_89.txt", sep = "\t", header = T, check.names = F)
ICGC <- ICGC[!ICGC$organ == "Breast",]
ICGC_Breast <- as.data.frame(t(ICGC_Breast))
ICGC_Breast$organ <- "Breast"
ICGC_Breast$Sample <- rownames(ICGC_Breast)
2362+990
ICGC_Breast <- ICGC_Breast[,colnames(ICGC)]
ICGC <- rbind(ICGC, ICGC_Breast)
ICGC <- ICGC[,colnames(GEL)]
consensus <- read.csv("data/consensus_InD_7organs_fixed.csv")
### make super fit with all the samples known
GEL <- read.table(file = "data/final_catalogues_89_v2.tsv", header = T, check.names = F)
ICGC <- read.table(file = "data/ICGC_89_channel_catalogue_organ.tsv", sep = "\t", header = T, check.names = F)
ICGC_Breast <- read.table(file =  "data/SCANB_ICGC_Breast_catalogues_89.txt", sep = "\t", header = T, check.names = F)
ICGC <- ICGC[!ICGC$organ == "Breast",]
ICGC_Breast <- as.data.frame(t(ICGC_Breast))
ICGC_Breast$organ <- "Breast"
ICGC_Breast$Sample <- rownames(ICGC_Breast)
rownames(ICGC_Breast) <- NULL
colnames(GEL)[which(colnames(GEL) == "sample")] <- "Sample"
GEL$organ[which(GEL$organ == "Head_Neck_SCC")] <- "Head_neck"
ICGC_Breast <- ICGC_Breast[,colnames(ICGC)]
ICGC <- rbind(ICGC, ICGC_Breast)
ICGC <- ICGC[,colnames(GEL)]
consensus <- read.csv("data/consensus_InD_7organs_fixed.csv")
x = "Breast"
data_f <- NULL
if(x %in% ICGC$organ){
data_f <- rbind(data_f, ICGC[which(ICGC$organ == x),])
}
if(x %in% GEL$organ){
data_f <- rbind(data_f, GEL[which(GEL$organ == x),])
}
data_f$organ <- NULL
rownames(data_f) <- data_f$Sample
data_f$Sample <- NULL
data_f <- as.data.frame(t(data_f))
data_f <- data_f[consensus$X,]
Fits <- sapply(names(common_rare_specific_commons),simplify = F, function(x){
data_f <- NULL
if(x %in% ICGC$organ){
data_f <- rbind(data_f, ICGC[which(ICGC$organ == x),])
}
if(x %in% GEL$organ){
data_f <- rbind(data_f, GEL[which(GEL$organ == x),])
}
data_f$organ <- NULL
rownames(data_f) <- data_f$Sample
data_f$Sample <- NULL
data_f <- as.data.frame(t(data_f))
data_f <- data_f[consensus$X,]
fits <- FitMS(data_f, commonSignatures = common_rare_specific_commons[[x]]$common_sigs,   rareSignatures = common_rare_specific_commons[[x]]$rare_sigs, randomSeed = 1497)
return(fits)
})
saveRDS(Fits, file = "results/ReferenceSignatures_InDel_test/Fits_file.RDS")
View(Fits)
hist(Fits$Head_neck$cossim_catalogueVSreconstructed)
hist(Fits$Breast$cossim_catalogueVSreconstructed)
colnames(signatures_defined)
View(clustering_table_RefSig)
library(parallel)
library(foreach)
library(parallel)
library(foreach)
cores=detectCores()
cl <- makeCluster(cores[1]-2) #not to overload your computer
registerDoParallel(cl)
Fits_same_common <- foreach(x = names(common_rare_specific_commons))%dopar%{
data_f <- NULL
if(x %in% ICGC$organ){
data_f <- rbind(data_f, ICGC[which(ICGC$organ == x),])
}
if(x %in% GEL$organ){
data_f <- rbind(data_f, GEL[which(GEL$organ == x),])
}
data_f$organ <- NULL
rownames(data_f) <- data_f$Sample
data_f$Sample <- NULL
data_f <- as.data.frame(t(data_f))
data_f <- data_f[consensus$X,]
fits <- FitMS(data_f, commonSignatures = common_rare_specific_commons[[x]]$common_sigs,   rareSignatures = common_rare_specific_commons[[x]]$rare_sigs, randomSeed = 1497)
return(fits)
}
Fits_same_common <- foreach(x = names(common_rare_specific_commons))%dopar%{
library(signature.tools.lib)
data_f <- NULL
if(x %in% ICGC$organ){
data_f <- rbind(data_f, ICGC[which(ICGC$organ == x),])
}
if(x %in% GEL$organ){
data_f <- rbind(data_f, GEL[which(GEL$organ == x),])
}
data_f$organ <- NULL
rownames(data_f) <- data_f$Sample
data_f$Sample <- NULL
data_f <- as.data.frame(t(data_f))
data_f <- data_f[consensus$X,]
fits <- FitMS(data_f, commonSignatures = common_rare_specific_commons[[x]]$common_sigs,   rareSignatures = common_rare_specific_commons[[x]]$rare_sigs, randomSeed = 1497)
return(fits)
}
saveRDS(Fits_same_common, file = "results/ReferenceSignatures_InDel_test/Fits_file_same_Common.RDS")
saveRDS(Fits_same_common, file = "Cam_home/Giuseppe_ecDNA/Pan_cancer_indel/results/ReferenceSignatures_InDel_test/common_rare_signatures_same_common.RDS")
save.image("~/Cam_home/Giuseppe_ecDNA/Pan_cancer_indel/results/ReferenceSignatures_InDel_test/Workspace_fits_19_11.RData")
setwd("~/Cam_home/Giuseppe_ecDNA/PRRDetect")
devtools::install()
install.packages("/media/sf_Tunnel/PRRDetect-main.zip", type = "source")
setwd("~/Cam_home/Giuseppe_ecDNA/PRRDetect")
devtools::install()
library(PRRDetect)
prepared_data <- PRRDetect::prepare_PRRDetect(Indel_VCF_path = "examples/MLH1_2_vs_RPE1_WT_2.pindel-filtered.vcf.gz", SNV_VCF_path = "examples//MLH1_2_vs_RPE1_WT_2.caveman-filtered.vcf.gz", genome.v = "hg38", nparallel = 4, is.filtered_SNV = T, is.filtered_InDel = T, organ = "Colorectal", setseed = 1497)
prepared_data <- PRRDetect::prepare_PRRDetect(Indel_VCF_path = "examples/MLH1_2_vs_RPE1_WT_2.pindel-filtered.vcf.gz", SNV_VCF_path = "examples//MLH1_2_vs_RPE1_WT_2.caveman-filtered.vcf.gz", genome.v = "hg38", nparallel = 4, is.filtered_SNV = T, is.filtered_InDel = T, organ = "Colorectal", setseed = 1497)
View(prepared_data)
prepared_data[["SNV"]]
?signature.tools.lib::FitMS
