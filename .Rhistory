if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_Catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
InDel_fit$exposures
InDel_fit$exposures
typeof(InDel_fit$exposures)
class(InDel_fit$exposures)
InDel_fit$exposures[,"RefSig.InD1"]
rownames(InDel_fit$exposures)
rowSums()InDel_fit$exposures)
rowSums(InDel_fit$exposures)
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_Catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
SNV_fit <- signature_fits$SNV$exposures
InDel_fit <- signature_fits$InDel$exposures
colnames(SNV_fit) <- unlist(lapply(strsplit(colnames(SNV_fit), split = "_", fixed = T), function(x){tail(x,1)}))
return(list("SNV"=SNV_fit, "InDel"=InDel_fit))
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
signature_fits$SNV$exposures[, pure_MMR_indS]
prep <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
prep$SNV
SNV_fit[,NULL]
SNV_fits <- prep$SNV
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
which(colnames(SNV_fits) %in% pure_MMR_sigs)
which(colnames(SNV_fits) %in% pure_POL_sigs)
rowSums(SNV_fits[, which(colnames(SNV_fits) %in% pure_POL_sigs)])
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[, which(colnames(SNV_fits) %in% pure_MMR_sigs)]))
which(colnames(SNV_fits) %in% pure_MMR_sigs)
rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs)]
)
rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs)
]
SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs)]
SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop = F]
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
MMR_SBS
cbind(MMR_SBS, 1,2,3,)
cbind(MMR_SBS, 1,2,3)
prep$InDel
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned")]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned")]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
colnames(prep$InDel)
InDel_fits <- prep$InDel
InDel_fits[,-which(colnames(InDel_fits) == "unassigned")]
InDel_fits[,-which(colnames(InDel_fits) == "unassigned"), drop= F]
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
return(prediction_function(final_df))
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$label = prediction_label(final_df)
return(prediction_function(final_df))
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
#final_df$label = prediction_label(final_df)
return(prediction_function(final_df))
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$label = prediction_label(final_df)
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$Prediction = prediction_label(final_df)
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$Prediction = prediction_label(final_df)
final_df <- final_df[,c(3,1,2,4,5)]
return(final_df)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
prep <- prepare_PRRDetect(Indel_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz", SNV_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "4787", organ = "Breast")
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
devtools::load_all(".")
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
library(indelsig.tools.lib)
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
prepared$InDel
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ, setseed = 42){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_Catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel, setseed)
SNV_fit <- signature_fits$SNV$exposures
InDel_fit <- signature_fits$InDel$exposures
colnames(SNV_fit) <- unlist(lapply(strsplit(colnames(SNV_fit), split = "_", fixed = T), function(x){tail(x,1)}))
return(list("SNV"=SNV_fit, "InDel"=InDel_fit, "SNV_Catalog"=catalogs$SNV_Catalog, "InDel_Catalog"=catalogs$Indel_Catalog))
}
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
plots_indelprofile_89ch(prepared$InDel_Catalog)
plots_indelprofile_89ch(prepared$InDel_Catalog, text_size = 10)
plots_indelprofile_89ch(prepared$InDel_Catalog, text_size = 10, outputname = "2375_indel_profile.pdf")
plots_indelprofile_89ch(prepared$InDel_Catalog, text_size = 10, outputname = "2375_indel_profile.pdf", colnum = 1)
plots_indelprofile_89ch(prepared$InDel_Catalog, text_size = 10, outputname = "test/2375_indel_profile.pdf", colnum = 1, w = 10, h=2)
plots_indelprofile_89ch(prepared$InDel_Catalog, text_size = 10, outputname = "test/2375_indel_profile.pdf", colnum = 1, w = 10, h=5)
plots_indelprofile_89ch(prepared$InDel_Catalog, text_size = 8, outputname = "test/2375_indel_profile.pdf", colnum = 1, w = 10, h=5)
plots_indelprofile_89ch(prepared$InDel_Catalog, text_size = 5, outputname = "test/2375_indel_profile.pdf", colnum = 1, w = 10, h=5)
signature.tools.lib::plotSubsSignatures(prepared$SNV_Catalog)
signature.tools.lib::plotSubsSignatures(prepared$SNV_Catalog,output_file = "test/2375_subs")
signature.tools.lib::plotSignatures(prepared$SNV_Catalog)
signature.tools.lib::plotSignatures(prepared$SNV_Catalog, output_file = "test/2375_SBS")
signature.tools.lib::plotSignatures(prepared$SNV_Catalog, output_file = "test/2375_SBS.pdf")
devtools::load_all(".")
rm(list = c("prepare_PRRDetect"))
devtools::load_all(".")
library(PRRDetect)
devtools::load_all(".")
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
library(indelsig.tools.lib)
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
View(prepared)
View(prepared[["SNV_Catalog"]])
View(prepared)
View(prepared[["InDel_Catalog"]])
devtools::load_all(".")
PRRDetect(InDel_fits = prepared$InDel, SNV_fits = prepared$SNV, SNV_Catalog = prepared$SNV_Catalog, InDel_catalog = prepared$InDel_Catalog)
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz", SNV_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
PRRDetect(InDel_fits = prepared$InDel, SNV_fits = prepared$SNV, SNV_Catalog = prepared$SNV_Catalog, InDel_catalog = prepared$InDel_Catalog)
prepared$SNV
prepared$InDel
InDel_fits <- prepared$InDel
SNV_Fits <- prepared$SNV
SNV_Catalog <- prepared$SNV_Catalog
InDel <- prepared$InDel_Catalog
rm(InDel)
InDel_Catalog <- prepared$InDel_Catalog
SNV_Fits
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])/colSums(SNV_Catalog))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/colSums(SNV_Catalog))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F])/colSums(SNV_Catalog))
SNV_fits <- SNV_Fits
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])/colSums(SNV_Catalog))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/colSums(SNV_Catalog))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F])/colSums(SNV_Catalog))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F])/colSums(InDel_catalog))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F])/colSums(InDel_catalog))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F])/colSums(InDel_catalog))
InDel_fits
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits, SNV_Catalog, InDel_catalog){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])/colSums(SNV_Catalog))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/colSums(SNV_Catalog))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F])/colSums(SNV_Catalog))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_indS), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F])/colSums(InDel_catalog))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_indS), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F])/colSums(InDel_catalog))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_indS), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F])/colSums(InDel_catalog))
Ratio <-  c(colSums(InDel_catalog) + 1)/(colSums(SNV_Catalog) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$Prediction = prediction_label(final_df)
final_df <- final_df[,c(3,1,2,4,5)]
return(final_df)
}
PRRDetect(InDel_fits = prepared$InDel, SNV_fits = prepared$SNV, SNV_Catalog = prepared$SNV_Catalog, InDel_catalog = prepared$InDel_Catalog)
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
PRRDetect(InDel_fits = prepared$InDel, SNV_fits = prepared$SNV, SNV_Catalog = prepared$SNV_Catalog, InDel_catalog = prepared$InDel_Catalog)
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
PRRDetect(InDel_fits = prepared$InDel, SNV_fits = prepared$SNV, SNV_Catalog = prepared$SNV_Catalog, InDel_catalog = prepared$InDel_Catalog)
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz", SNV_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "4787", organ = "Breast")
PRRDetect(InDel_fits = prepared$InDel, SNV_fits = prepared$SNV, SNV_Catalog = prepared$SNV_Catalog, InDel_catalog = prepared$InDel_Catalog)
prepared$InDel_Catalog
prepared$SNV
prepared$InDel
exposures <- list(Bladder= read.table("Bladder_exposures.tsv", sep = "\t", header = T, check.names = F),
CNS= read.table("CNS_exposures.tsv", sep = "\t", header = T, check.names = F),
Colorectal= read.table("Colorectal_exposures.tsv", sep = "\t", header = T, check.names = F),
Lung= read.table("Lung_exposures.tsv", sep = "\t", header = T, check.names = F),
Stomach= read.table("Stomach_exposures.tsv", sep = "\t", header = T, check.names = F),
Uterus= read.table("Uterus_exposures.tsv", sep = "\t", header = T, check.names = F),
Skin=read.table("Skin_exposures.tsv", sep = "\t", header = T, check.names = F))
setwd("~/Work/Indel refsig/exposures/exposures_09_01_23")
exposures <- list(Bladder= read.table("Bladder_exposures.tsv", sep = "\t", header = T, check.names = F),
CNS= read.table("CNS_exposures.tsv", sep = "\t", header = T, check.names = F),
Colorectal= read.table("Colorectal_exposures.tsv", sep = "\t", header = T, check.names = F),
Lung= read.table("Lung_exposures.tsv", sep = "\t", header = T, check.names = F),
Stomach= read.table("Stomach_exposures.tsv", sep = "\t", header = T, check.names = F),
Uterus= read.table("Uterus_exposures.tsv", sep = "\t", header = T, check.names = F),
Skin=read.table("Skin_exposures.tsv", sep = "\t", header = T, check.names = F))
exposures <- do.call("cbind", exposures)
exposures_9a <- exposures[,exposures["RefSig.InD9a",] > 0]
exposures_9a <- exposures_9a[!apply(exposures_9a, 1, function(x){all(x==0)}),]
exposures_9a_max_proportion  <- apply(exposures_9a,2, function(x){ x["RefSig.InD9a"]/ sum(x)})
sort(exposures_9a_max_proportion, decreasing = T)[1:2]
exposures_9b <- exposures[,exposures["RefSig.InD9b",] > 0]
exposures_9b <- exposures_9b[!apply(exposures_9b, 1, function(x){all(x==0)}),]
exposures_9b_max_proportion  <- apply(exposures_9b,2, function(x){ x["RefSig.InD9b"]/ sum(x)})
sort(exposures_9b_max_proportion, decreasing = T)[1:2]
exposures_9c <- exposures[,exposures["RefSig.InD9c",] > 0]
exposures_9c <- exposures_9c[!apply(exposures_9c, 1, function(x){all(x==0)}),]
exposures_9c_max_proportion  <- apply(exposures_9c,2, function(x){ x["RefSig.InD9c"]/ sum(x)})
sort(exposures_9c_max_proportion, decreasing = T)[1:2]
sort(exposures_9a_max_proportion, decreasing = T)[1:10]
sort(exposures_9b_max_proportion, decreasing = T)[1:10]
sort(exposures_9c_max_proportion, decreasing = T)[1:10]
exposures_9a <- exposures[,exposures["RefSig.InD9a",] > 0]
View(exposures_9a)
exposures_9b <- exposures[,exposures["RefSig.InD9b",] > 0]
exposures_9b <- exposures_9b[!apply(exposures_9b, 1, function(x){all(x==0)}),]
View(exposures_9b)
exposures_9b <- exposures[,exposures["RefSig.InD9b",] > 0]
exposures_9b <- exposures[,exposures["RefSig.InD9b",] > 0]
exposures_9b <- exposures_9b[!apply(exposures_9b, 1, function(x){all(x==0)}),]
exposures_9b_max_proportion  <- apply(exposures_9b,2, function(x){ x["RefSig.InD9b"]})
sort(exposures_9b_max_proportion, decreasing = T)[1:10]
