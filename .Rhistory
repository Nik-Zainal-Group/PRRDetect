library(signature.tools.lib)
?getSignaturesForFitting
getSignaturesForFitting()
getSignaturesForFitting(, organ = "NULL")
getSignaturesForFitting(organ = "NULL")
getSignaturesForFitting(organ = "Breast")
read.table("data/consensus_InD_7organs - consensus_InD_7organs.tsv")
read.table("data/consensus_InD_7organs - consensus_InD_7organs.tsv", sep = "\t", header = T, row.names = 1)
data = read.table("data/consensus_InD_7organs - consensus_InD_7organs.tsv", sep = "\t", header = T, row.names = 1)
View(data)
data = read.table("data/consensus_InD_7organs - consensus_InD_7organs.tsv", sep = "\t", header = T)
View(data)
View(data)
data = read.table("data/consensus_InD_7organs - consensus_InD_7organs.tsv", sep = "\t", header = T, row.names = 1)
tail(colnames(data),n = 1)
dim(colnames(data))
length(colnames(data))
colnames(data) <- c("RefSig.InD1", colnames(data)[1:36])
View(data)
write.table(data,file = "data/consensus_InD_7organs - consensus_InD_7organs.tsv", quote = F, sep ="\t", row.names = T, col.names = T)
data = read.table("data/consensus_InD_7organs - consensus_InD_7organs.tsv", sep ="\t")
View(data)
colourpicker:::colourPickerAddin()
setwd("~/Work/PRRDetect")
Indel_prova <- "test/S002375_l_d_a_vs_B002682.annot.vcf.gz"
SNV_prova <- "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz"
signature.tools.lib::vcfToSNVcatalogue(vcfFilename = SNV_prova, genome.v = "GRCh38")
signature.tools.lib::vcfToSNVcatalogue(vcfFilename = SNV_prova, genome.v = "GRCh38")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = T), genome.v = "GRCh38")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = T), genome.v = "hg38")
library(indelsig.tools.lib)
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = T), genome.v = "GRCh38")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = T), genome.v = "hg38")
read.table(Indel_prova, sep = "\t", header = T)
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = F), genome.v = "hg38")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = F), genome.v = "GRCh38")
a <- read.table(Indel_prova, sep = "\t", header = T)
View(a)
a <- read.table(Indel_prova, sep = "\t", header = F)
View(a)
?fisher.test
head(a)
indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = F)[c(3,1,2,4,5)], genome.v = "GRCh38")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = F)[c(3,1,2,4,5)], genome.v = "38")
?Chisquare
?chisq.test
?tabToIndelsClassification
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = read.table(Indel_prova, sep = "\t", header = F)[c(3,1,2,4,5)], genome.v = "hg38")
read.table(Indel_prova, sep = "\t", header = F)[c(3,1,2,4,5)]
a <- read.table(Indel_prova, sep = "\t", header = F)[c(3,1,2,4,5)]
colnames(a) <- c("Sample", "chr", "position", "REF", "ALT")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = a , genome.v = "hg38")
View(a)
a <- read.table(Indel_prova, sep = "\t", header = F)#[c(3,1,2,4,5)]
View(a)
View(a)
table(a$V7)
devtools::install_github("https://github.com/Nik-Zainal-Group/utility.scripts.git")
devtools::install_github("Nik-Zainal-Group/utility.scripts")
devtools::install_github("Nik-Zainal-Group/utility.scripts",auth_token = "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")
library(utility.scripts)
utility.scripts::pindelVcfFilter(Indel_prova, "test/Indel_2375.vcf")
utility.scripts::pindelVcfFilter(Indel_prova, "test/Indel_2375.vcf", sample_name = "2375",genomev = "hg38")
utility.scripts::pindelVcfFilter(Indel_prova, "test/Indel_2375.vcf", sample_name = "2375",genomev = "hg38",filterPASS = T, qualmin = 250, repmax = 9 )
utility.scripts::pindelVcfFilter("test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz", "test/Indel_4787.vcf", sample_name = "4787",genomev = "hg38",filterPASS = T, qualmin = 250, repmax = 9 )
utility.scripts::cavemanVcfFilter(vcffile = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", vcfout = "test/2375_SNV.vcf", genomev = "hg38", sample_name = "2375",clpm_max = 0, asmd_min = 140, filterPASS = T)
utility.scripts::cavemanVcfFilter(vcffile = "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz", vcfout = "test/4787_SNV.vcf", genomev = "hg38", sample_name = "2375",clpm_max = 0, asmd_min = 140, filterPASS = T)
signature.tools.lib::vcfToSNVcatalogue(vcfFilename = "test/2375_SNV.vcf.bgz", genome.v = "GRCh38")
signature.tools.lib::vcfToSNVcatalogue(vcfFilename = "test/2375_SNV.vcf.bgz")
signature.tools.lib::vcfToSNVcatalogue(vcfFilename = "test/2375_SNV.vcf.bgz",genome.v = "hg38")
read.table("test/Indel_2375.vcf.bgz")
View(read.table("test/Indel_2375.vcf.bgz"))
length(unique(read.table("test/Indel_2375.vcf.bgz")$V3))
dim(read.table("test/Indel_2375.vcf.bgz")
)
a <- read.table("test/Indel_2375.vcf.bgz")#[c(3,1,2,4,5)]
colnames(a) <- c("Sample", "chr", "position", "REF", "ALT")
a <- read.table("test/Indel_2375.vcf.bgz")#[c(3,1,2,4,5)]
View(a)
a <- read.table("test/Indel_2375.vcf.bgz")[c(3,1,2,4,5)]
View(a)
a$V3 <- "2375"
colnames(a) <- c("Sample", "chr", "position", "REF", "ALT")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = a , genome.v = "hg38")
View(InDel_catalog)
InDel_catalog <- indelsig.tools.lib::gen_catalogue89(InDel_catalog, sample_col = "Sample")
View(InDel_catalog)
signatures <- read.table("data/InDel_Consensus_Sigs.tsv", sep ="\t")
View(signatures)
dput(rownames(signatures))
InDel_sigs_order <- c("A[Ins(C):R0]A", "A[Ins(C):R0]T", "Ins(C):R(0,3)", "Ins(C):R(4,6)",
"Ins(C):R(7,9)", "A[Ins(T):R(0,4)]A", "A[Ins(T):R(0,4)]C", "A[Ins(T):R(0,4)]G",
"C[Ins(T):R(0,4)]A", "C[Ins(T):R(0,4)]C", "C[Ins(T):R(0,4)]G",
"G[Ins(T):R(0,4)]A", "G[Ins(T):R(0,4)]C", "G[Ins(T):R(0,4)]G",
"A[Ins(T):R(5,7)]A", "A[Ins(T):R(5,7)]C", "A[Ins(T):R(5,7)]G",
"C[Ins(T):R(5,7)]A", "C[Ins(T):R(5,7)]C", "C[Ins(T):R(5,7)]G",
"G[Ins(T):R(5,7)]A", "G[Ins(T):R(5,7)]C", "G[Ins(T):R(5,7)]G",
"A[Ins(T):R(8,9)]A", "A[Ins(T):R(8,9)]C", "A[Ins(T):R(8,9)]G",
"C[Ins(T):R(8,9)]A", "C[Ins(T):R(8,9)]C", "C[Ins(T):R(8,9)]G",
"G[Ins(T):R(8,9)]A", "G[Ins(T):R(8,9)]C", "G[Ins(T):R(8,9)]G",
"Ins(2,4):R0", "Ins(5,):R0", "Ins(2,4):R1", "Ins(5,):R1", "Ins(2,):R(2,4)",
"Ins(2,):R(5,9)", "[Del(C):R1]A", "[Del(C):R1]T", "[Del(C):R2]A",
"[Del(C):R2]T", "[Del(C):R3]A", "[Del(C):R3]T", "[Del(C):R(4,5)]A",
"[Del(C):R(4,5)]T", "[Del(C):R(1,5)]G", "Del(C):R(6,9)", "A[Del(T):R(1,4)]A",
"A[Del(T):R(1,4)]C", "A[Del(T):R(1,4)]G", "C[Del(T):R(1,4)]A",
"C[Del(T):R(1,4)]C", "C[Del(T):R(1,4)]G", "G[Del(T):R(1,4)]A",
"G[Del(T):R(1,4)]C", "G[Del(T):R(1,4)]G", "A[Del(T):R(5,7)]A",
"A[Del(T):R(5,7)]C", "A[Del(T):R(5,7)]G", "C[Del(T):R(5,7)]A",
"C[Del(T):R(5,7)]C", "C[Del(T):R(5,7)]G", "G[Del(T):R(5,7)]A",
"G[Del(T):R(5,7)]C", "G[Del(T):R(5,7)]G", "A[Del(T):R(8,9)]A",
"A[Del(T):R(8,9)]C", "A[Del(T):R(8,9)]G", "C[Del(T):R(8,9)]A",
"C[Del(T):R(8,9)]C", "C[Del(T):R(8,9)]G", "G[Del(T):R(8,9)]A",
"G[Del(T):R(8,9)]C", "G[Del(T):R(8,9)]G", "Del(2,4):R1", "Del(5,):R1",
"Del(2,8):U(1,2):R(2,4)", "Del(2,):U(1,2):R(5,9)", "Del(3,):U(3,):R2",
"Del(3,):U(3,):R(3,9)", "Del(2,5):M1", "Del(3,5):M2", "Del(4,5):M(3,4)",
"Del(6,):M1", "Del(6,):M2", "Del(6,):M3", "Del(6,):M(4,)", "Complex"
)
InDel_catalog[InDel_sigs_order,]
InDel_catalog <- InDel_catalog[InDel_sigs_order,]
InDel_catalog[InDel_sigs_order,]
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = a , genome.v = "hg38")
InDel_catalog <- indelsig.tools.lib::gen_catalogue89(InDel_catalog, sample_col = "Sample")
InDel_catalog[InDel_sigs_order,]
View(InDel_catalog)
InDel_catalog[InDel_sigs_order,, drop=F]
InDel_catalog <- InDel_catalog[InDel_sigs_order,, drop=F]
basename(Indel_prova)
dirname(Indel_prova)
dirname("a/b/c/d/a.txt")
SNV_Filter <- function(vcffile,vcfout,genomev,sample_name,clpm_max=0,asmd_min=140,filterPASS=T){
tempvcf <- tempfile()
system(paste0("zgrep -v vcfProcessLog ",vcffile," > ",tempvcf))
subs_VCF <- VariantAnnotation::readVcf(tempvcf,genome = genomev)
e.snv <- VariantAnnotation::expand(subs_VCF)
if(filterPASS){
selected_snv <- VariantAnnotation::fixed(e.snv)[,"FILTER"]=="PASS"
e.snv <- e.snv[selected_snv,]
}
selected_snv <- VariantAnnotation::info(e.snv)$CLPM<=clpm_max & VariantAnnotation::info(e.snv)$ASMD>=asmd_min
e.snv <- e.snv[selected_snv,]
VariantAnnotation::writeVcf(e.snv,vcfout,index=TRUE)
}
InDelFilter <- function(vcffile,vcfout,genomev,sample_name,qualmin=250,repmax=9,filterPASS=T){
indels_VCF <- VariantAnnotation::readVcf(vcffile,genome = genomev)
e.indels <- VariantAnnotation::expand(indels_VCF)
if(filterPASS){
selected_indels <- VariantAnnotation::fixed(e.indels)[,"FILTER"]=="PASS"
e.indels <- e.indels[selected_indels,]
}
selected_indels <- VariantAnnotation::fixed(e.indels)[,"QUAL"]>=qualmin & VariantAnnotation::info(e.indels)$REP<=repmax
e.indels <- e.indels[selected_indels,]
VariantAnnotation::writeVcf(e.indels,vcfout,index=TRUE)
}
signature.tools.lib::vcfToSNVcatalogue(vcfFilename = "test/2375_SNV.vcf.bgz",genome.v = "hg38")
signature.tools.lib::vcfToSNVcatalogue(vcfFilename = "test/2375_SNV.vcf.bgz",genome.v = "hg38")$catalogue
View(InDel_catalog)
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375")
#' Generate catalogs from VCF files
#'
#' @param Indel_VCF_path : "Path of the InDel VCF file"
#' @param SNV_VCF_path : "Path of the SNV VCF file"
#' @param genome.v : "Genome version"
#' @return List containing the catalogs
#' @export
generate_catalogs_from_vcf <- function(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name){
InDel_VCF <- read.table(Indel_VCF_path)[c(3,1,2,4,5)]
InDel_VCF$V3 <- sample_name
colnames(InDel_VCF) <- c("Sample", "chr", "position", "REF", "ALT")
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = InDel_VCF, genome.v = genome.v)
InDel_catalog <- indelsig.tools.lib::gen_catalogue89(InDel_catalog, sample_col = "Sample")
InDel_catalog <- InDel_catalog[InDel_sigs_order,, drop=F]
colnames(InDel_catalog) <- sample_name
SNV_catalog <- signature.tools.lib::vcfToSNVcatalogue(vcfFilename = SNV_VCF_path, genome.v = genome.v)$catalogue
colnames(SNV_catalog) <- sample_name
return(list("Indel_Catalog"=InDel_catalog, "SNV_Catalog"=SNV_catalog))
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375")
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered.bgz"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered.bgz"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375")
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375")
Signature_fit <- function(SNV_Catalog, InDel_Catalog, organ, nparallel){
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
InDel_fit <- signature.tools.lib::Fit(catalogues = InDel_Catalog, signatures = read.table("data/InDel_Consensus_Sigs.tsv", sep = "\t"), useBootstrap = T, nparallel= nparallel)
return(list("SNV"=SNV_fit, "InDel"=InDel_fit))
}
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375",organ = "Breast")
Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz"
SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz"
genome.v = "hg38"
nparallel = 16
is.filtered_SNV = F
is.filtered_InDel = F
sample_name = "2375"
organ = "Breast"
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
catalogs
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
InDel_VCF <- read.table(Indel_VCF_path)[c(3,1,2,4,5)]
