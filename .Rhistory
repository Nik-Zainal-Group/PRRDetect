InDel_catalog <- indelsig.tools.lib::gen_catalogue89(InDel_catalog, sample_col = "Sample")
InDel_catalog <- InDel_catalog[InDel_sigs_order,, drop=F]
colnames(InDel_catalog) <- sample_name
SNV_catalog <- signature.tools.lib::vcfToSNVcatalogue(vcfFilename = SNV_VCF_path, genome.v = genome.v)$catalogue
colnames(SNV_catalog) <- sample_name
return(list("Indel_Catalog"=InDel_catalog, "SNV_Catalog"=SNV_catalog))
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375")
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered.bgz"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered.bgz"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375")
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375")
Signature_fit <- function(SNV_Catalog, InDel_Catalog, organ, nparallel){
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
InDel_fit <- signature.tools.lib::Fit(catalogues = InDel_Catalog, signatures = read.table("data/InDel_Consensus_Sigs.tsv", sep = "\t"), useBootstrap = T, nparallel= nparallel)
return(list("SNV"=SNV_fit, "InDel"=InDel_fit))
}
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F,is.filtered_InDel = F, sample_name = "2375",organ = "Breast")
Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz"
SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz"
genome.v = "hg38"
nparallel = 16
is.filtered_SNV = F
is.filtered_InDel = F
sample_name = "2375"
organ = "Breast"
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
catalogs
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
InDel_VCF <- read.table(Indel_VCF_path)[c(3,1,2,4,5)]
devtools::load_all(".")
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ){
library(indelsig.tools.lib)
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ){
library(indelsig.tools.lib)
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
#signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
return(catalogs)
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
prepared <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
View(prepared)
catalogs <- prepared
rm(prepared)
SNV_Catalog <- catalogs$SNV_Catalog
InDel_Catalog <- catalogs$Indel_Catalog
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
organ = "Breast"
nparallel = 16
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
View(SNV_fit)
View(SNV_fit[["commonSignatures"]])
SNV_fit[["exposures"]]
InDel_fit <- signature.tools.lib::Fit(catalogues = InDel_Catalog, signatures = read.table("data/InDel_Consensus_Sigs.tsv", sep = "\t"), useBootstrap = T, nparallel= nparallel)
View(InDel_fit)
InDel_fit[["exposures"]]
signature_fits <- Signature_fit(catalogs$SNV_catalog, catalogs$Indel_Catalog, organ, nparallel)
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
InDel_fit <- signature.tools.lib::Fit(catalogues = InDel_Catalog, signatures = read.table("data/InDel_Consensus_Sigs.tsv", sep = "\t"), useBootstrap = T, nparallel= nparallel)
nrow(catalogs$SNV_Catalog)
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
Signature_fit <- function(SNV_Catalog, InDel_Catalog, organ, nparallel){
library(signature.tools.lib)
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
InDel_fit <- signature.tools.lib::Fit(catalogues = InDel_Catalog, signatures = read.table("data/InDel_Consensus_Sigs.tsv", sep = "\t"), useBootstrap = T, nparallel= nparallel)
return(list("SNV"=SNV_fit, "InDel"=InDel_fit))
}
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
Signature_fit <- function(SNV_Catalog, InDel_Catalog, organ, nparallel){
library(signature.tools.lib)
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
InDel_fit <- signature.tools.lib::Fit(catalogues = InDel_Catalog, signatures = read.table("data/InDel_Consensus_Sigs.tsv", sep = "\t"), useBootstrap = T, nparallel= nparallel)
return(list("SNV"=SNV_fit, "InDel"=InDel_fit))
}
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
Signature_fit <- function(SNV_Catalog, InDel_Catalog, organ, nparallel){
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
InDel_fit <- signature.tools.lib::Fit(catalogues = InDel_Catalog, signatures = read.table("data/InDel_Consensus_Sigs.tsv", sep = "\t"), useBootstrap = T, nparallel= nparallel)
return(list("SNV"=SNV_fit, "InDel"=InDel_fit))
}
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
SNV_fit <- signature.tools.lib::FitMS(catalogues = SNV_Catalog, organ = organ,useBootstrap = T, nparallel = nparallel )
signature_fits <- Signature_fit(SNV_Catalog = SNV_catalog, InDel_Catalog = Indel_Catalog, organ, nparallel)
signature_fits <- Signature_fit(SNV_Catalog = SNV_Catalog, InDel_Catalog = Indel_Catalog, organ, nparallel)
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_Catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
View(signature_fits)
signature_fits[["SNV"]][["samples"]]
signature_fits[["SNV"]][["exposures"]]
a <- signature_fits[["SNV"]][["exposures"]]
names(a)
a
colnames(a)
strsplit(colnames(a), split = "_", fixed = T)
lapply(strsplit(colnames(a), split = "_", fixed = T), function(x){tail(x,1)}
)
unlist(lapply(strsplit(colnames(a), split = "_", fixed = T), function(x){tail(x,1)}))
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ){
library(indelsig.tools.lib)
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_Catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
return(signature_fits)
}
InDel_fit$exposures
InDel_fit$exposures
typeof(InDel_fit$exposures)
class(InDel_fit$exposures)
InDel_fit$exposures[,"RefSig.InD1"]
rownames(InDel_fit$exposures)
rowSums()InDel_fit$exposures)
rowSums(InDel_fit$exposures)
prepare_PRRDetect <- function(Indel_VCF_path, SNV_VCF_path, genome.v, nparallel, is.filtered_SNV=F, is.filtered_InDel=F, sample_name, organ){
if(is.filtered_SNV == F){
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
}
if(is.filtered_InDel == F){
InDelFilter(vcffile = Indel_VCF_path, vcfout = paste0(Indel_VCF_path, ".filtered"), genomev = genome.v, sample_name = sample_name )
Indel_VCF_path <- paste0(Indel_VCF_path, ".filtered.bgz")
}
catalogs  <- generate_catalogs_from_vcf(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
signature_fits <- Signature_fit(SNV_Catalog = catalogs$SNV_Catalog, InDel_Catalog = catalogs$Indel_Catalog, organ, nparallel)
SNV_fit <- signature_fits$SNV$exposures
InDel_fit <- signature_fits$InDel$exposures
colnames(SNV_fit) <- unlist(lapply(strsplit(colnames(SNV_fit), split = "_", fixed = T), function(x){tail(x,1)}))
return(list("SNV"=SNV_fit, "InDel"=InDel_fit))
}
prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
signature_fits$SNV$exposures[, pure_MMR_indS]
prep <- prepare_PRRDetect(Indel_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.vcf.gz", SNV_VCF_path = "test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "2375", organ = "Breast")
prep$SNV
SNV_fit[,NULL]
SNV_fits <- prep$SNV
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
which(colnames(SNV_fits) %in% pure_MMR_sigs)
which(colnames(SNV_fits) %in% pure_POL_sigs)
rowSums(SNV_fits[, which(colnames(SNV_fits) %in% pure_POL_sigs)])
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[, which(colnames(SNV_fits) %in% pure_MMR_sigs)]))
which(colnames(SNV_fits) %in% pure_MMR_sigs)
rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs)]
)
rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs)
]
SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs)]
SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop = F]
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
MMR_SBS
cbind(MMR_SBS, 1,2,3,)
cbind(MMR_SBS, 1,2,3)
prep$InDel
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned")]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned")]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
colnames(prep$InDel)
InDel_fits <- prep$InDel
InDel_fits[,-which(colnames(InDel_fits) == "unassigned")]
InDel_fits[,-which(colnames(InDel_fits) == "unassigned"), drop= F]
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
return(prediction_function(final_df))
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$label = prediction_label(final_df)
return(prediction_function(final_df))
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
#final_df$label = prediction_label(final_df)
return(prediction_function(final_df))
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$label = prediction_label(final_df)
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$Prediction = prediction_label(final_df)
return(final_df)
#############################################
## add prediction and and label
#############################################
#  return(sample_out)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
#' Compute PRRDetect probability and label to file
#'
#' @param ind_fits : "Indel Signatures Fits"
#' @param snv_fits : "SNV Signatures Fits"
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F]))
ifelse(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0)), MIX_SBS <- 0 , MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F]))
## INDEL
ifelse(identical(which(colnames(InDel_fits) %in% pure_MMR_sigs), integer(0)), MMR_IND <- 0 , MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% pure_POL_sigs), integer(0)), POL_IND <- 0 , POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F]))
ifelse(identical(which(colnames(InDel_fits) %in% mixed_sigs), integer(0)), MIX_IND <- 0 , MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F]))
Ratio <- (rowSums(InDel_fits[,-which(colnames(InDel_fits)=="unassigned"), drop = F]) + 1) / (rowSums(SNV_fits[,-which(colnames(SNV_fits) == "unassigned"), drop = F]) + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$Prediction = prediction_label(final_df)
final_df <- final_df[,c(3,1,2,4,5)]
return(final_df)
}
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
prep <- prepare_PRRDetect(Indel_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz", SNV_VCF_path = "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz", genome.v = "hg38", nparallel = 16, is.filtered_SNV = F, is.filtered_InDel = F, sample_name = "4787", organ = "Breast")
PRRDetect(InDel_fits = prep$InDel, SNV_fits = prep$SNV)
