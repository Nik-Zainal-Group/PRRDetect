devtools::load_all(".")
rm(generate_catalogs_from_mutations())
rm(generate_catalogs_from_mutations)
devtools::load_all(".")
devtools::load_all(".")
generate_catalogs_from_mutations(aaa)
generate_catalogs_from_mutations(aaa, genome.v = "hg38")
devtools::load_all(".")
generate_catalogs_from_mutations(aaa, genome.v = "hg38")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
library(indelsig.tools.lib)
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
View(aaa)
View(aaa[[2]])
is(aaa, "list")
is(aaa, "vector")
is.vector(aaa)
is.atomic(aaa)
is.atomic(c(1,2,3,4))
is.list(c(1,2,3,4))
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
InDel_sigs_order
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
filtered <- read.table("test/S002375_l_d_a_vs_B002682.annot.vcf.gz.filtered.bgz")[c(3,1,2,4,5)]
filtered$V3  <- "2375"
colnames(filtered) <- c("Sample", "chr", "position", "REF", "ALT")
filtered2 <- read.table("test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz.filtered.bgz")[c(3,1,2,4,5)]
filtered2$V3  <- "2vsvs375"
colnames(filtered2) <- c("Sample", "chr", "position", "REF", "ALT")
aaa <- list(filtered, filtered2)
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
filtered <- read.table("test/S002375_l_d_a_vs_B002682.annot.vcf.gz.filtered.bgz")[c(3,1,2,4,5)]
filtered$V3  <- "2375"
colnames(filtered) <- c("Sample", "chr", "position", "REF", "ALT")
filtered2 <- read.table("test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz.filtered.bgz")[c(3,1,2,4,5)]
filtered2$V3  <- "2vsvs375"
colnames(filtered2) <- c("Sample", "chr", "position", "REF", "ALT")
aaa <- list(as.data.frame(filtered), as.data.frame(filtered2))
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
devtools::load_all(".")
aaa
Indel_VCF <- aaa
is.null(Indel_VCF) == F
is(Indel_VCF, "list")
is.atomic(Indel_VCF)
Indel_catalogs <- lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
genome.v = "hg38"
lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
Indel_catalogs <- lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
Indel_catalogs <- do.call("cbind",Indel_catalogs)
ifelse(is.null(Indel_VCF), NULL,Indel_catalogs)
Indel_catalogs <- lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
do.call("cbind",Indel_catalogs)
Indel_catalogs <- lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
Indel_catalogs <- as.data.frame(do.call("cbind",Indel_catalogs))
Indel_catalogs
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
Indel_VCF <- aaa
Indel_catalogs <- lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
Indel_catalogs <- as.data.frame(do.call("cbind",Indel_catalogs))
Indel_catalogs
ifelse(is.null(Indel_VCF), NULL,Indel_catalogs)
list("Indel_Catalog"=ifelse(is.null(Indel_VCF), NULL,Indel_catalogs), "SNV_Catalog"=ifelse(is.null(SNV_VCF), NULL, SNV_catalogs), "total_SNV"=ifelse(is.null(SNV_VCF), NULL, colSums(SNV_catalogs)), "total_InD"=ifelse(is.null(Indel_VCF), NULL, nrow_InDel_catalogs))
list("Indel_Catalog"=ifelse(is.null(Indel_VCF), NULL,Indel_catalogs), "SNV_Catalog"=ifelse(is.null(SNV_VCF), NULL, SNV_catalogs), "total_SNV"=ifelse(is.null(SNV_VCF), NULL, colSums(SNV_catalogs)), "total_InD"=ifelse(is.null(Indel_VCF), NULL, nrow_InDel_catalogs)))
list("Indel_Catalog"=ifelse(is.null(Indel_VCF), NULL,Indel_catalogs), "SNV_Catalog"=ifelse(is.null(SNV_VCF), NULL, SNV_catalogs), "total_SNV"=ifelse(is.null(SNV_VCF), NULL, colSums(SNV_catalogs)), "total_InD"=ifelse(is.null(Indel_VCF), NULL, nrow_InDel_catalogs))
SNV_VCF=NULL
list("Indel_Catalog"=ifelse(is.null(Indel_VCF), NULL,Indel_catalogs), "SNV_Catalog"=ifelse(is.null(SNV_VCF), NULL, SNV_catalogs), "total_SNV"=ifelse(is.null(SNV_VCF), NULL, colSums(SNV_catalogs)), "total_InD"=ifelse(is.null(Indel_VCF), NULL, nrow_InDel_catalogs))
list(Indel_Catalog=ifelse(is.null(Indel_VCF), NULL,Indel_catalogs), SNV_Catalog=ifelse(is.null(SNV_VCF), NULL, SNV_catalogs), total_SNV=ifelse(is.null(SNV_VCF), NULL, colSums(SNV_catalogs)), total_InD=ifelse(is.null(Indel_VCF), NULL, nrow_InDel_catalogs))
Indel_Catalog
ifelse(is.null(Indel_VCF), NULL,Indel_catalogs)
Indel_Catalog=ifelse(is.null(Indel_VCF), NULL,Indel_catalogs)
View(Indel_Catalog)
Indel_catalogs <- lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
Indel_catalogs <- as.data.frame(do.call("cbind",Indel_catalogs))
View(Indel_catalogs)
ifelse(is.null(Indel_VCF), NULL,Indel_catalogs)
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
b <- list()
b$a <- "aaaaaa"
b$z <- "aaaaadcdsvcsadc"
b
rm(b)
generate_catalogs_from_mutations
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
devtools::load_all(".")
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
b <- generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
View(b)
colSums(b$Indel_Catalog)
b$total_InD
devtools::document()
devtools::document()
devtools::document()
#' Generate catalogs from VCF data
#'
#' This function returns the catalogs and the total number of mutations from VCF files. You can give just InDel VCF param or SNV VCF param.
#'
#' @param Indel_VCF: Vector of paths or list of data frames. If it is a vector of paths the file will be rearranged by the function, otherwise it has to be a list of dataframe having the following structure: "Sample", "chr", "position", "REF", "ALT"
#' @param SNV_VCF:  Vector of paths or list of data frames.
#' @param genome.v: Either "hg19" or "hg38", which is the default option.
#' @param sample_name: Vector of sample names, it has to be in the same order of Indel VCF vector or list.
#' @return Returns a list containing the Indel Catalos, total InD and/or SNV catalogs, total SNV
#' @export
generate_catalogs_from_mutations <- function(Indel_VCF=NULL, SNV_VCF=NULL, genome.v="hg38", sample_name=NULL){
## if it is a list then it is a list of dataframes
## if it is a vector is anything else
outlist = list()
library(indelsig.tools.lib)
class_and_catalog <- function(x, genome.v){
InDel_catalog <- indelsig.tools.lib::indel_classifier89(indels = x, genome.v = genome.v)
InDel_catalog <- indelsig.tools.lib::gen_catalogue89(InDel_catalog, sample_col = "Sample")
InDel_catalog <- InDel_catalog[InDel_sigs_order,, drop=F]
return(InDel_catalog)
}
if(is.null(Indel_VCF)==F){
if(is.atomic(Indel_VCF)){
Indel_VCF <- apply(array(Indel_VCF),1, function(y){
w <- read.table(y)[c(3,1,2,4,5)]
w$V3 <- basename(y)
colnames(w) <- c("Sample", "chr", "position", "REF", "ALT")
return(w)
})
}
nrow_InDel_catalogs <- unlist(lapply(Indel_VCF,function(y){
return(nrow(y))
}))
Indel_catalogs <- lapply(Indel_VCF, function(y){class_and_catalog(y, genome.v = genome.v)})
Indel_catalogs <- as.data.frame(do.call("cbind",Indel_catalogs))
if(is.null(sample_name)==F){
colnames(Indel_catalogs) <- sample_name
}
names(nrow_InDel_catalogs) <- colnames(Indel_catalogs)
outlist$Indel_Catalog = Indel_catalogs
outlist$total_InD = nrow_InDel_catalogs
}
if(is.null(SNV_VCF)==F){
if(is(SNV_VCF, "vector")){
SNV_catalogs <- lapply(SNV_VCF, function(x){signature.tools.lib::vcfToSNVcatalogue(vcfFilename = x, genome.v = genome.v)$catalogue})
SNV_catalogs <- do.call("cbind", SNV_catalogs)
if(is.null(sample_name)==F){
colnames(SNV_catalogs) <- sample_name
}
}else if(is(SNV_VCF, "list")){
SNV_catalogs <- lapply(SNV_VCF, function(x) {
signature.tools.lib::tabToSNVcatalogue(vcfFilename = x, genome.v = genome.v)$catalogue})
SNV_catalogs <- do.call("cbind", SNV_catalogs)
if(is.null(sample_name)==F){
colnames(SNV_catalogs) <- sample_name
}
}
outlist$SNV_Catalog=SNV_catalogs
outlist$total_SNV=colSums(SNV_catalogs)
}
return(outlist)
}
devtools::load_all(".")
rm(generate_catalogs_from_mutations)
devtools::load_all(".")
devtools::load_all(".")
?PRRDetect::PRRDetect
devtools::load_all(".")
?prepare_PRRDetect
generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
aaa
generated_catalogs <- generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
#preparedPRR1 <-
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast" )
devtools::load_all(".")
#preparedPRR1 <-
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast" )
devtools::load_all(".")
#preparedPRR1 <-
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast" )
SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz")
paste0(SNV_VCF_path, ".filtered")
devtools::load_all(".")
#preparedPRR1 <-
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast" )
devtools::load_all(".")
#preparedPRR1 <-
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast" )
SNV_VCF_path
genome.v
#preparedPRR1 <-
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("2342", "22353"))
sample_name = c("2342", "22353")
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
devtools::load_all(".")
SNV_Filter(SNV_VCF_path, vcfout = paste0(SNV_VCF_path, ".filtered"), genomev = genome.v,sample_name = sample_name )
SNV_VCF_path
vcffile <- SNV_VCF_path
vcfout <- paste0(SNV_VCF_path, ".filtered")
genomev <- genome.v
clpm_max=0
asmd_min=140
filterPASS=T
vcffile <- SNV_VCF_path[1]
vcfout <- paste0(SNV_VCF_path[1], ".filtered")
tempvcf <- tempfile()
system(paste0("zgrep -v vcfProcessLog ",vcffile[i]," > ",tempvcf))
i=1
vcffile[i]
tempvcf <- tempfile()
system(paste0("zgrep -v vcfProcessLog ",vcffile[i]," > ",tempvcf))
subs_VCF <- VariantAnnotation::readVcf(tempvcf,genome = genomev)
e.snv <- VariantAnnotation::expand(subs_VCF)
if(filterPASS){
selected_snv <- VariantAnnotation::fixed(e.snv)[,"FILTER"]=="PASS"
e.snv <- e.snv[selected_snv,]
}
selected_snv <- VariantAnnotation::info(e.snv)$CLPM<=clpm_max & VariantAnnotation::info(e.snv)$ASMD>=asmd_min
e.snv <- e.snv[selected_snv,]
VariantAnnotation::writeVcf(e.snv,vcfout[i],index=TRUE)
#preparedPRR1 <-
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("2342", "22353"))
catalogs  <- generate_catalogs_from_mutations(Indel_VCF_path, SNV_VCF_path, genome.v, sample_name)
catalogs  <- generate_catalogs_from_mutations(NULL, SNV_VCF_path, genome.v, sample_name)
sample_name
sample_name = NULL
catalogs  <- generate_catalogs_from_mutations(Indel_VCF = Indel_VCF_path,SNV_VCF =  SNV_VCF_path,genome.v =  genome.v, sample_name = sample_name)
catalogs  <- generate_catalogs_from_mutations(Indel_VCF = NULL, SNV_VCF =  SNV_VCF_path,genome.v =  genome.v, sample_name = sample_name)
SNV_VCF_path <- paste0(SNV_VCF_path, ".filtered.bgz")
catalogs  <- generate_catalogs_from_mutations(Indel_VCF = NULL, SNV_VCF =  SNV_VCF_path,genome.v =  genome.v, sample_name = sample_name)
catalogs$SNV_Catalog
catalogs$total_SNV
Signature_fit(SNV_Catalog = ifelse(is.null(SNV_VCF_path)==F, catalogs$SNV_Catalog, SNV_Catalogs) , InDel_Catalog = ifelse(is.null(Indel_VCF_path)==F, catalogs$Indel_Catalog, InDel_Catalogs), organ, nparallel, setseed)
setseed = 42
nparallel = 16
organ = "Breast"
Signature_fit(SNV_Catalog = ifelse(is.null(SNV_VCF_path)==F, catalogs$SNV_Catalog, SNV_Catalogs) , InDel_Catalog = ifelse(is.null(Indel_VCF_path)==F, catalogs$Indel_Catalog, InDel_Catalogs), organ, nparallel, setseed)
ifelse(is.null(SNV_VCF_path)==F, catalogs$SNV_Catalog, SNV_Catalogs)
catalogs$SNV_Catalog)
catalogs$SNV_Catalog
catalogs$SNV_Catalog
SNV_Catalogs
SNV_Catalogs=NULL
ifelse(is.null(SNV_VCF_path)==F, catalogs$SNV_Catalog, SNV_Catalogs)
catalogs$SNV_Catalog
ifelse(is.null(SNV_VCF_path)==F, as.data.frame(catalogs$SNV_Catalog), SNV_Catalogs)
ifelse(is.null(SNV_VCF_path)==F, as.data.frame(catalogs$SNV_Catalog), SNV_Catalogs)
ifelse(is.null(SNV_VCF_path)==F, as.data.frame(catalogs$SNV_Catalog, drop=F), SNV_Catalogs)
ifelse(is.null(SNV_VCF_path)==F, catalogs$SNV_Catalog, 1)
if( is.null(SNV_VCF_path)){
SNVC <- catalogs$SNV_Catalog
}else{
SNVC <- SNV_Catalogs
}
if( is.null(Indel_VCF_path)){
INDC <- catalogs$Indel_Catalog
}else{
INDC <- InDel_Catalogs
}
Indel_VCF_path=NULL
if( is.null(Indel_VCF_path)){
INDC <- catalogs$Indel_Catalog
}else{
INDC <- InDel_Catalogs
}
Indel_catalogs
SNVC
if( is.null(SNV_VCF_path) == F){
SNVC <- catalogs$SNV_Catalog
}else{
SNVC <- SNV_Catalogs
}
SNVC
Signature_fit(SNV_Catalog = SNVC , InDel_Catalog = INDC, organ, nparallel, setseed)
signature_fits <- Signature_fit(SNV_Catalog = SNVC , InDel_Catalog = INDC, organ, nparallel, setseed)
SNV_fit <- signature_fits$SNV$exposures
InDel_fit <- signature_fits$InDel$exposures
colnames(SNV_fit) <- unlist(lapply(strsplit(colnames(SNV_fit), split = "_", fixed = T), function(x){tail(x,1)}))
list("SNV"=SNV_fit, "InDel"=InDel_fit, "total_SNV"=ifelse(is.null(SNV_VCF_path)==F,catalogs$total_SNV, colSums(SNV_Catalogs)) , "total_InDel"= ifelse(is.null(Indel_VCF_path)==F, catalogs$total_InD, total_InDel), "total_InDel_catalog"=colSums(InDel_Catalogs))
ifelse(is.null(Indel_VCF_path)==F, catalogs$total_InD, total_InDel)
total_InDel=NULL
ifelse(is.null(Indel_VCF_path)==F, catalogs$total_InD, total_InDel)
devtools::load_all(".")
devtools::load_all(".")
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("2342", "22353"))
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast")
devtools::load_all(".")
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast")
devtools::load_all(".")
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast")
devtools::load_all(".")
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast")
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("A", "B"))
devtools::load_all(".")
prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("A", "B"))
a <- prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("A", "B"))
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
a$InDel
a$SNV
a$total_InDel
a$total_SNV
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
InDel_fits = a$InDel
SNV_fits = a$SNV
total_SNV = a$total_SNV
total_InD = a$total_InDel
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## SNV
ifelse(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0)), MMR_SBS <- 0 , MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])/ total_SNV)
ifelse(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0)), POL_SBS <- 0 , POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/ total_SNV)
SNV_fits
rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/ total_SNV
POL_SBS
devtools::load_all(".")
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
## SNV
if(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0))){
MMR_SBS <- 0
}else{
MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])/total_SNV
}
MMR_SBS
if(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0))){
POL_SBS <- 0
}else{
POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/total_SNV
}
POL_SBS
identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0))
devtools::load_all(".")
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
rm(MIX_SBS)
if(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0))){
MIX_SBS <- rep(0,nrow(SNV_fits))
}else{
MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F])/total_SNV
}
MIX_SBS
## SNV
if(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0))){
MMR_SBS <- rep(0,nrow(SNV_fits))
}else{
MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])/total_SNV
}
if(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0))){
POL_SBS <- rep(0,nrow(SNV_fits))
}else{
POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/total_SNV
}
if(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0))){
MIX_SBS <- rep(0,nrow(SNV_fits))
}else{
MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F])/total_SNV
}
if(identical(which(colnames(InDel_fits) %in% pure_MMR_indS), integer(0))){
MMR_IND <- rep(0,nrow(SNV_fits))
}else{
MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F])/total_InD
}
if(identical(which(colnames(InDel_fits) %in% pure_POL_indS), integer(0))){
POL_IND <- rep(0,nrow(SNV_fits))
}else{
POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F])/total_InD
}
if(identical(which(colnames(InDel_fits) %in% mixed_indS), integer(0))){
MIX_IND <- rep(0,nrow(SNV_fits))
}else{
MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F])/total_InD
}
Ratio <-  c(total_InD + 1)/(total_SNV + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df, prediction_type = prediction_type)
prediction_type="prop"
final_df <- prediction_function(final_df, prediction_type = prediction_type)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$Prediction = prediction_label(final_df)
final_df <- final_df[,c(3,1,2,4,5)]
final_df
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
rm(MIX_SBS)
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0))
rep(0,nrow(SNV_fits))
MIX_SBS <- rep(0,nrow(SNV_fits))
rm(MIX_SBS)
#' Compute PRRDetect probability and label
#'
#' @param ind_fits: Indel Signatures Fits
#' @param snv_fits: SNV Signatures Fits
#' @param total_SNV: total number of SNVs of the sample
#' @param total_InD: total number of InDel mutation in the sample
#' @return PRRDetect table
#' @export
PRRDetect <- function(InDel_fits, SNV_fits, total_SNV, total_InD, prediction_type="prop"){
pure_MMR_sigs <- paste0("SBS", c(6,15,26,44,97))
pure_POL_sigs <- paste0("SBS", c("10a", "10d"))
mixed_sigs <- paste0("SBS", c(14,20))
pure_MMR_indS <- paste0("RefSig.InD", c(7,19))
pure_POL_indS <- paste0("RefSig.InD", c(14,15))
mixed_indS <- paste0("RefSig.InD", c("16a", "16b", 20, 21))
## if the name of the signature is not present, which returns "integer(0)", then the sum is equal to 0, otherwise is equal to the rowsum
if(prediction_type == "prob"){
## SNV
if(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0))){
MMR_SBS <- rep(0,nrow(SNV_fits))
}else{
MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])/total_SNV
}
if(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0))){
POL_SBS <- rep(0,nrow(SNV_fits))
}else{
POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])/total_SNV
}
if(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0))){
MIX_SBS <- rep(0,nrow(SNV_fits))
}else{
MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F])/total_SNV
}
if(identical(which(colnames(InDel_fits) %in% pure_MMR_indS), integer(0))){
MMR_IND <- rep(0,nrow(SNV_fits))
}else{
MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F])/total_InD
}
if(identical(which(colnames(InDel_fits) %in% pure_POL_indS), integer(0))){
POL_IND <- rep(0,nrow(SNV_fits))
}else{
POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F])/total_InD
}
if(identical(which(colnames(InDel_fits) %in% mixed_indS), integer(0))){
MIX_IND <- rep(0,nrow(SNV_fits))
}else{
MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F])/total_InD
}
}else if(prediction_type == "abs"){
## SNV
if(identical(which(colnames(SNV_fits) %in% pure_MMR_sigs), integer(0))){
MMR_SBS <- rep(0,nrow(SNV_fits))
}else{
MMR_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_MMR_sigs), drop=F])
}
if(identical(which(colnames(SNV_fits) %in% pure_POL_sigs), integer(0))){
POL_SBS <- rep(0,nrow(SNV_fits))
}else{
POL_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% pure_POL_sigs), drop=F])
}
if(identical(which(colnames(SNV_fits) %in% mixed_sigs), integer(0))){
MIX_SBS <- rep(0,nrow(SNV_fits))
}else{
MIX_SBS <- rowSums(SNV_fits[,which(colnames(SNV_fits) %in% mixed_sigs), drop=F])
}
if(identical(which(colnames(InDel_fits) %in% pure_MMR_indS), integer(0))){
MMR_IND <- rep(0,nrow(SNV_fits))
}else{
MMR_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_MMR_indS), drop=F])
}
if(identical(which(colnames(InDel_fits) %in% pure_POL_indS), integer(0))){
POL_IND <- rep(0,nrow(SNV_fits))
}else{
POL_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% pure_POL_indS), drop=F])
}
if(identical(which(colnames(InDel_fits) %in% mixed_indS), integer(0))){
MIX_IND <- rep(0,nrow(SNV_fits))
}else{
MIX_IND <- rowSums(InDel_fits[,which(colnames(InDel_fits) %in% mixed_indS), drop=F])
}
}
Ratio <-  c(total_InD + 1)/(total_SNV + 1)
final_df <- as.data.frame(cbind(MMR_SBS, MIX_SBS, POL_SBS, MMR_IND, MIX_IND, POL_IND, Ratio))
final_df[,1:6] <- log2(final_df[,1:6]+1)
final_df[,7] <- log2(final_df[,7])
final_df <- prediction_function(final_df, prediction_type = prediction_type)
colnames(final_df)[1:4] <- c("MMRd", "MMRd+Poly-dys", "Negative", "Poly-dys")
final_df$Prediction = prediction_label(final_df)
final_df <- final_df[,c(3,1,2,4,5)]
return(final_df)
}
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
library(PRRDetectBatch)
filtered <- read.table("test/S002375_l_d_a_vs_B002682.annot.vcf.gz.filtered.bgz")[c(3,1,2,4,5)]
filtered$V3  <- "2375"
colnames(filtered) <- c("Sample", "chr", "position", "REF", "ALT")
filtered2 <- read.table("test/S004787_l_d_a_vs_B007402_d.annot.vcf.gz.filtered.bgz")[c(3,1,2,4,5)]
filtered2$V3  <- "2vsvs375"
colnames(filtered2) <- c("Sample", "chr", "position", "REF", "ALT")
aaa_SNV <-
aaa <- list(as.data.frame(filtered), as.data.frame(filtered2))
generated_catalogs <- generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
a <- prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("A", "B"))
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
a <- prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("A", "B"))
generated_catalogs <- generate_catalogs_from_mutations(Indel_VCF = aaa, genome.v = "hg38")
a <- prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("A", "B"))
library(PRRDetectBatch)
a <- prepare_PRRDetect(InDel_Catalogs = generated_catalogs$Indel_Catalog, SNV_VCF_path = c("test/S002375_l_d_a_vs_B002682.annot.muts.vcf.gz", "test/S004787_l_d_a_vs_B007402_d.annot.muts.vcf.gz"), is.filtered_SNV = F,genome.v = "hg38", nparallel = 16, organ = "Breast", sample_name = c("A", "B"))
a
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
colnames(a$SNV)
devtools::load_all(".")
PRRDetect(InDel_fits = a$InDel, SNV_fits = a$SNV, total_SNV = a$total_SNV, total_InD = a$total_InDel )
